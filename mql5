
//+------------------------------------------------------------------+
//|                                                      LT HiLo Activator |
//|                                             Copyright Â© forexroboteasy.com |
//|                                             Developed by Forex Robot Easy Team |
//+------------------------------------------------------------------+

#property copyright 'forexroboteasy.com'
#property link      'forexroboteasy.com'
#property version   '1.00'

// Input parameters
extern int CalculationPeriod = 14; // Calculation period for LT HiLo Activator

// Global variables
double ltHiloActivatorBuffer[];
int trend = 0;

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
{
   // Set indicator buffers
   SetIndexBuffer(0, ltHiloActivatorBuffer, INDICATOR_DATA);
   
   // Set indicator label
   IndicatorSetString(INDICATOR_SHORTNAME, 'LT HiLo Activator');

   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Custom indicator iteration function                              |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total,
                const int prev_calculated,
                const datetime &time[],
                const double &open[],
                const double &high[],
                const double &low[],
                const double &close[],
                const long &tick_volume[],
                const long &volume[],
                const int &spread[])
{
   // Calculate LT HiLo Activator
   for (int i = prev_calculated; i < rates_total; i++)
   {
      if (i < CalculationPeriod)
      {
         ltHiloActivatorBuffer[i] = 0;
         continue;
      }

      double highestHigh = High[Highest(NULL, 0, MODE_HIGH, CalculationPeriod, i)];
      double lowestLow = Low[Lowest(NULL, 0, MODE_LOW, CalculationPeriod, i)];

      ltHiloActivatorBuffer[i] = (highestHigh + lowestLow) / 2;

      // Check for trend change
      if (trend == 1 && close[i] < ltHiloActivatorBuffer[i])
      {
         Alert('Downtrend started');
         trend = -1;
      }
      else if (trend == -1 && close[i] > ltHiloActivatorBuffer[i])
      {
         Alert('Uptrend started');
         trend = 1;
      }
   }

   return(rates_total);
}
